import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class MastermindColorSequence
{
    List<Integer> fColorSequence;
    int[] fGuessAnalysis = {9, 9, 9, 9};

    public MastermindColorSequence()
    {
        fColorSequence = new ArrayList<>(4);
    }

    /**
     * Sets the list to a random color sequence.
     * By Cameron
     */
    public void generateRandomColorSequence()
    {
        Random random = new Random();

        for(int i = 0; i < 4; i++)
        {
            fColorSequence.add(random.nextInt(5) + 1);
        }
    }

    /**
     * Sets the instance sequence to the color sequence.
     * @param colorSequence The color sequence the instance sequence will be set to.
     * By Cameron
     */
    public void setColorSequence(List<Integer> colorSequence)
    {
        fColorSequence = colorSequence;
    }

    /**
     * Gets the color sequence
     * @return An int array representing the color sequence.
     * By Cameron
     */
    public List<Integer> getColorSequence()
    {
        return fColorSequence;
    }

    /**
     * Gets the guess analysis.
     * @return The guess analysis, how the guess compares to the correct sequence.
     * By Sam
     */
    public int[] getGuessAnalysis()
    {
        return fGuessAnalysis;
    }

    /**
     * Resets the color sequence list so that all of the colors are 0
     * By Cameron
     */
    public void resetColorSequence()
    {
        fColorSequence = new ArrayList<>(4);
    }

    /**
     * Changes a color at a specific point in the sequence.
     * @param index The index at which the list is being set to the color value.
     * @param color The color being changed to.
     * By Cameron
     */
    public void setColors(int index, int color)
    {
        fColorSequence.set(index, color);
    }

    /**
     * Compares the user's color sequence guess to the correct computer generated sequence.
     *
     * @param computerSequence The color sequence generated by the computer.
     * @return An int array representing the comparison between the correct color sequence and guessed color sequence.
     * 7 indicates that a color is in the sequence and that the color is in the correct position.
     * 8 indicates that a color is in the sequence but not in the correct position.
     * 9 indicates that no color is in the sequence.
     * By Cameron
     */
    public int[] checkGuess(List<Integer> computerSequence)
    {

        //sets ints in guessAnalysis to 7 or 8 based on the comparison
        for(int i = 0; i < fColorSequence.size(); i++)                  //iterate across the guessed sequence
        {
            for(int j = computerSequence.size() - 1; j >= 0; j--)       //iterate down the correct sequence for each color in the guessed sequence
            {
                if(fColorSequence.get(i) == computerSequence.get(j))            //colors are the same
                {
                    if(i == j)                                          //colors are in the same position
                    {
                        fGuessAnalysis[i] = 7;
                        computerSequence.remove(j);
                        break;                                          //closes the inner loop so that the value is not reset to 8 if the
                    }                                                   //same color is found in a different position
                    else                                                //same colors but different position
                    {
                        fGuessAnalysis[i] = 8;
                    }
                }
            }
        }

        //selection sort from least to greatest
        for (int i = 0; i < fGuessAnalysis.length - 1; i++)
        {
            int index = i;
            for (int j = i + 1; j < fGuessAnalysis.length; j++)
                if (fGuessAnalysis[j] < fGuessAnalysis[index])
                    index = j;

            int smallerNumber = fGuessAnalysis[index];
            fGuessAnalysis[index] = fGuessAnalysis[i];
            fGuessAnalysis[i] = smallerNumber;
        }

        boolean hasWon = true;
        //Checks to see if the guess matches the computer sequence
        for(int num: fGuessAnalysis)
        {
            if(num != 7)
            {
                hasWon = false;
            }
        }

        if(hasWon)
        {
            return null;
        }

        return fGuessAnalysis;
    }
    public void printCheck()
    {
        MastermindColorSequence computerSequence = new MastermindColorSequence();
        MastermindColorSequence sequence = new MastermindColorSequence();
        List<Integer> compSequence = computerSequence.getColorSequence();
        List<Integer> seq = sequence.getColorSequence();
        compSequence.add(2);
        compSequence.add(4);
        compSequence.add(3);
        compSequence.add(3);

        seq.add(3);
        seq.add(1);
        seq.add(1);
        seq.add(1);

        sequence.setColorSequence(seq);
        computerSequence.setColorSequence(compSequence);

        int[] analysis = sequence.checkGuess(computerSequence.getColorSequence());

        for (int a : analysis)
        {
            System.out.println(a);
        }
    }
}
