import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;

/**
 * Graphics component class that draws everything on the screen.
 * This includes interpreting data from the ColorSequence object class
 *
 * Mainly coded by Sam, with occasional fixes from Cameron
 */
public class MastermindGraphics extends JComponent
{
    //stores width of screen
    private int fWidth;
    //stores height of screen
    private int fHeight;

    //boolean flag to detect which screen to draw
    private boolean isGameRunning;
    //int flag to detect when the user has either lost or won the game
    //choose to use an int here because there are three states the game can be in: won, lost, or neither
    //2 is a victory, 3 is a loss, 1 is neither
    private int isGameWon;
    //the ColorSequence the user changes
    private MastermindColorSequence userGuess;
    //the ColorSequence generated by the computer that the user is trying to guess
    private MastermindColorSequence computerSequence;
    //array to store the analysis of the user's guess to the computer sequence
    private int[] guessAnalysis;
    //list to store all of the previously entered user guesses, and their analyses. Every guess/analysis
    //is grouped in pairs of two arrays, the guess followed by its analysis. Had to switch to an int[] List
    //because we could not get a list of ColorSequence objects to work.
    private List<int[]> userGuessHistory;
    //int to store what color button was selected
    private int colorSet;
    //int to keep track of the turns
    private int turnCounter;

    /**
     * For the colors, I'm using the order that I have them listed here
     * for the number code, or, in other words:
     * 1 = orange
     * 2 = red
     * 3 = green
     * 4 = blue
     * 5 = yellow
     * 6 = magenta
     * Zero I have left out so that we can use that for uncolored
     * 7 = Black
     * 8 = White
     * 9 = Nothing
     */

    //buttons used in the game
    private EasyButton fEasyButton;
    private MediumButton fMediumButton;
    private HardButton fHardButton;
    private OrangeButton fOrangeButton;
    private RedButton fRedButton;
    private GreenButton fGreenButton;
    private BlueButton fBlueButton;
    private YellowButton fYellowButton;
    private MagentaButton fMagentaButton;
    private Slot1Button fSlot1;
    private Slot2Button fSlot2;
    private Slot3Button fSlot3;
    private Slot4Button fSlot4;
    private CheckGuessButton fCheckGuess;
    private BackButton fBackButton;

    /**
     * Constructor for component class. Sets everything up.
     * @param width screen width
     * @param height screen height
     *
     * Method by Sam
     */
    public MastermindGraphics(int width, int height)
    {
        //grabs screen width and height
        fWidth = width;
        fHeight = height;
        //sets it so first screen to show is Level Select
        isGameRunning = false;
        //sets int flag to neither win nor loss
        isGameWon = 1;
        //initializes userGuess, computerSequence, userGuessHistory, and guessAnalysis
        userGuess = new MastermindColorSequence();
        computerSequence = new MastermindColorSequence();
        userGuessHistory = new ArrayList<>();
        guessAnalysis = new int[4];
        //sets guessAnalysis to initially have nothing in it (all 9's)
        guessAnalysis = userGuess.getGuessAnalysis();
        //calls init to set up all the buttons on the screen
        init();
    }

    /**
     * Method containing all the button initializations. Keeps them out of the way
     *
     * Method by Sam
     */
    public void init()
    {
        setSize( fWidth, fHeight );

        fEasyButton = new EasyButton();
        fEasyButton.setBounds(225, 500, 400, 36);
        add( fEasyButton );

        fMediumButton = new MediumButton();
        fMediumButton.setBounds(225, 556, 400, 36);
        add( fMediumButton );

        fHardButton = new HardButton();
        fHardButton.setBounds(225, 612, 400, 36);
        add( fHardButton );

        fOrangeButton = new OrangeButton();
        fOrangeButton.setContentAreaFilled(true);
        fOrangeButton.setOpaque(true);
        fOrangeButton.setBounds(20, 40, 100, 100);
        fOrangeButton.setBackground(Color.ORANGE);
        fOrangeButton.setOpaque(true);
        fOrangeButton.setBorderPainted(false);
        add(fOrangeButton);

        fRedButton = new RedButton();
        fRedButton.setBounds(20, 150, 100, 100);
        fRedButton.setBackground(Color.RED);
        fRedButton.setOpaque(true);
        fRedButton.setBorderPainted(false);
        add(fRedButton);

        fGreenButton = new GreenButton();
        fGreenButton.setBounds(20, 260, 100, 100);
        fGreenButton.setBackground(Color.GREEN);
        fGreenButton.setOpaque(true);
        fGreenButton.setBorderPainted(false);
        add(fGreenButton);

        fBlueButton = new BlueButton();
        fBlueButton.setBounds(20, 370, 100, 100);
        fBlueButton.setBackground(Color.BLUE);
        fBlueButton.setOpaque(true);
        fBlueButton.setBorderPainted(false);
        add(fBlueButton);

        fYellowButton = new YellowButton();
        fYellowButton.setBounds(20, 480, 100, 100);
        fYellowButton.setBackground(Color.YELLOW);
        fYellowButton.setOpaque(true);
        fYellowButton.setBorderPainted(false);
        add(fYellowButton);

        fMagentaButton = new MagentaButton();
        fMagentaButton.setBounds(20, 590, 100, 100);
        fMagentaButton.setBackground(Color.MAGENTA);
        fMagentaButton.setOpaque(true);
        fMagentaButton.setBorderPainted(false);
        add(fMagentaButton);

        fCheckGuess = new CheckGuessButton();
        fCheckGuess.setBounds(365, 620, 150, 36);
        add(fCheckGuess);

        fSlot1 = new Slot1Button();
        fSlot1.setBounds(160, 450, 130, 130);
        fSlot1.setBackground(Color.GRAY);
        fSlot1.setOpaque(true);
        fSlot1.setBorderPainted(false);
        add(fSlot1);

        fSlot2 = new Slot2Button();
        fSlot2.setBounds(300, 450, 130, 130);
        fSlot2.setBackground(Color.GRAY);
        fSlot2.setOpaque(true);
        fSlot2.setBorderPainted(false);
        add(fSlot2);

        fSlot3 = new Slot3Button();
        fSlot3.setBounds(440, 450, 130, 130);
        fSlot3.setBackground(Color.GRAY);
        fSlot3.setOpaque(true);
        fSlot3.setBorderPainted(false);
        add(fSlot3);

        fSlot4 = new Slot4Button();
        fSlot4.setBounds(580, 450, 130, 130);
        fSlot4.setBackground(Color.GRAY);
        fSlot4.setOpaque(true);
        fSlot4.setBorderPainted(false);
        add( fSlot4 );

        fBackButton = new BackButton();
        fBackButton.setBounds(400, 300, 100, 35);
        add( fBackButton );
    }

    /**
     * paintComponent class. Creates the screen. Has a boolean flag to determine if
     * the level select screen is up or game screen is up. Then draws dependent on that.
     *
     * @param g graphics
     *
     * Method by Sam
     */
    public void paintComponent(Graphics g)
    {
        //checks which screen to draw
        if (!isGameRunning)
        {
            LevelSelectConstants(g);
        }
        else
        {
            //checks if the game has either been lost or won, and sets up the screen accordingly
            if (isGameWon == 2 || isGameWon == 3)
            {
                //changes all the buttons
                fBackButton.setVisible(true);
                fBackButton.setEnabled(true);

                fCheckGuess.setVisible(false);
                fCheckGuess.setEnabled(false);

                fOrangeButton.setEnabled(false);
                fRedButton.setEnabled(false);
                fGreenButton.setEnabled(false);
                fBlueButton.setEnabled(false);
                fYellowButton.setEnabled(false);
                fMagentaButton.setEnabled(false);

                fSlot1.setEnabled(false);
                fSlot2.setEnabled(false);
                fSlot3.setEnabled(false);
                fSlot4.setEnabled(false);

                //still has to draw that dark grey background
                g.setColor(Color.DARK_GRAY);
                g.fillRect(0, 0, 885, 800);

                //this collection of code draws the correct sequence at the bottom of the game screen,
                //regardless of win or loss
                //temporary int to move the drawing location of the box
                int Xtemp = 320;
                //loop goes through each color in the sequence
                for (int i = 0; i < computerSequence.getColorSequence().size(); i++)
                {
                    //stores the current color being looked at
                    int color = computerSequence.getColorSequence().get(i);
                    //switch statement turns int value of color into color, and sets g accordingly
                    switch (color)
                    {
                        case 0:
                        {
                            g.setColor(Color.GRAY);
                            break;
                        }
                        case 1:
                        {
                            g.setColor(Color.ORANGE);
                            break;
                        }
                        case 2:
                        {
                            g.setColor(Color.RED);
                            break;
                        }
                        case 3:
                        {
                            g.setColor(Color.GREEN);
                            break;
                        }
                        case 4:
                        {
                            g.setColor(Color.BLUE);
                            break;
                        }
                        case 5:
                        {
                            g.setColor(Color.YELLOW);
                            break;
                        }
                        case 6:
                        {
                            g.setColor(Color.MAGENTA);
                            break;
                        }
                    }
                    //draws the current color box
                    g.fillRect(Xtemp, 600, 50, 50);
                    //moves the drawing location for the next color in the sequence
                    Xtemp += 60;
                }

                //Draws either the winning or losing text
                g.setColor(Color.WHITE);
                g.setFont(new Font("Arial", Font.PLAIN, 120));
                //determines which text to draw
                if (isGameWon == 2)
                {
                    g.drawString("Victory!", 250, 200);
                }
                else
                {
                    g.drawString("You lose...", 200, 200);
                }
            }
            //otherwise, if the game is neither currently at a win or loss, draws the game screen like normal
            else
            {
                GameScreenConstants(g);
                //draws the black and white feedback dots to the right of the user's guess
                for (int index = 0; index < guessAnalysis.length; index++)
                {
                    int feedback = guessAnalysis[index];
                    //switches color from ints to its appropriate color interpretation
                    switch (feedback)
                    {
                        case 7:
                        {
                            g.setColor(Color.BLACK);
                            break;
                        }
                        case 8:
                        {
                            g.setColor(Color.WHITE);
                            break;
                        }
                        case 9:
                        {
                            g.setColor(Color.DARK_GRAY);
                            break;
                        }
                    }
                    //checks where it is drawing the oval based on current index
                    if (index == 0)
                    {
                        g.fillOval(720, 450, 60, 60);
                    }
                    else if (index == 1)
                    {
                        g.fillOval(785, 450, 60, 60);
                    }
                    else if (index == 2)
                    {
                        g.fillOval(720, 515, 60, 60);
                    }
                    else
                    {
                        g.fillOval(785, 515, 60, 60);
                    }
                    repaint();
                }
            }
        }

        repaint();
    }

    /**
     * Method containing the things that are always redrawn every time the level select screen is shown.
     * Helps to keep them from cluttering up the paintComponent method
     * @param g graphics
     *
     * Method by Sam
     */
    public void LevelSelectConstants(Graphics g)
    {
        //show level select buttons
        fEasyButton.setVisible(true);
        fEasyButton.setEnabled(true);

        fMediumButton.setVisible(true);
        fMediumButton.setEnabled(true);

        fHardButton.setVisible(true);
        fHardButton.setEnabled(true);

        //draw background
        g.setColor(Color.DARK_GRAY);
        g.fillRect(0, 0, 885, 800);

        //set all other buttons off
        fOrangeButton.setVisible(false);
        fRedButton.setVisible(false);
        fGreenButton.setVisible(false);
        fBlueButton.setVisible(false);
        fYellowButton.setVisible(false);
        fMagentaButton.setVisible(false);

        fOrangeButton.setEnabled(false);
        fRedButton.setEnabled(false);
        fGreenButton.setEnabled(false);
        fBlueButton.setEnabled(false);
        fYellowButton.setEnabled(false);
        fMagentaButton.setEnabled(false);

        fCheckGuess.setVisible(false);
        fCheckGuess.setEnabled(false);

        fSlot1.setVisible(false);
        fSlot1.setEnabled(false);

        fSlot2.setVisible(false);
        fSlot2.setEnabled(false);

        fSlot3.setVisible(false);
        fSlot3.setEnabled(false);

        fSlot4.setVisible(false);
        fSlot4.setEnabled(false);

        fBackButton.setVisible(false);
        fBackButton.setEnabled(false);

        //drawstring for the title
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.BOLD, 72));
        g.drawString("Mastermind", 220, 100);

        //drawstring for the entire freaking instruction paragraph, formatted to fit the screen.
        g.setFont(new Font("Arial", Font.PLAIN, 20));
        g.drawString("Instructions: Mastermind is a logic brain puzzle game, where you have a certain number of ", 20, 200);
        g.drawString("guesses to crack the color code generated by the computer. The computer creates a sequence ", 20, 220);
        g.drawString("of four random colors out of six possible colors. Repeats in a sequence are allowed. Your ", 20, 240);
        g.drawString("job is to figure out the sequence before you run out of guesses. On the far right hand side ", 20, 260);
        g.drawString("of the screen will be the color choices. The bottom center of the screen will have the four ", 20, 280);
        g.drawString("sequence placement choices. Select a color, then select a sequence placement. Then, click the ", 20, 300);
        g.drawString("\"Check Guess\" button. The computer will then give feedback about the color sequence you ", 20, 320);
        g.drawString("guessed in the form of black and white pegs in a square on the right of your guessed sequence. ", 20, 340);
        g.drawString("A black peg means that one of your guessed colors is both correct, and in the right spot in the ", 20, 360);
        g.drawString("sequence. A white peg means that there is a correct color in your sequence, but not in the right ", 20, 380);
        g.drawString("spot. No peg means that a color in your sequence is not in it at all. THE ORDER OF THE PEGS ", 20, 400);
        g.drawString("DOES NOT CORRESPOND IN ANY WAY TO WHICH COLORS ARE CORRECT OR NOT. All ", 20, 420);
        g.drawString("a black peg means is that some color in the sequence is in the right spot, and does not tell ", 20, 440);
        g.drawString("you anything of which one that color is. That is the challenge of the game. Good luck, player!", 20, 460);
    }

    /**
     * Method containing the things that are always redrawn every time the game screen is drawn.
     * Helps to keep them from cluttering up the paintComponent method
     * @param g graphics
     *
     * Method by Sam
     */
    public void GameScreenConstants(Graphics g)
    {
        //set level select buttons off
        fEasyButton.setVisible(false);
        fEasyButton.setEnabled(false);

        fMediumButton.setVisible(false);
        fMediumButton.setEnabled(false);

        fHardButton.setVisible(false);
        fHardButton.setEnabled(false);

        fBackButton.setVisible(false);
        fBackButton.setEnabled(false);

        //draws background
        g.setColor(Color.DARK_GRAY);
        g.fillRect(0, 0, 885, 800);

        //draws the string showing the user how many guesses they have left
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.BOLD, 30));
        g.drawString("Guesses Remaining: " + turnCounter, 275, 720);

        //turns on all the color buttons
        fOrangeButton.setEnabled(true);
        fRedButton.setEnabled(true);
        fGreenButton.setEnabled(true);
        fBlueButton.setEnabled(true);
        fYellowButton.setEnabled(true);
        fMagentaButton.setEnabled(true);

        fOrangeButton.setVisible(true);
        fRedButton.setVisible(true);
        fGreenButton.setVisible(true);
        fBlueButton.setVisible(true);
        fYellowButton.setVisible(true);
        fMagentaButton.setVisible(true);

        //turns on checkGuess button
        fCheckGuess.setVisible(true);
        fCheckGuess.setEnabled(true);

        //turns on all the slot buttons
        fSlot1.setEnabled(true);
        fSlot1.setVisible(true);

        fSlot2.setEnabled(true);
        fSlot2.setVisible(true);

        fSlot3.setEnabled(true);
        fSlot3.setVisible(true);

        fSlot4.setEnabled(true);
        fSlot4.setVisible(true);

        //this section of code draws all the users previous guesses and their respective analyses
        //along the top of the screen.
        //First checks if there have been any previous guesses yet
        if (userGuessHistory.size() >=1)
        {
            //a bunch of temporary ints used to move the location of all the squares/dots
            int X1temp = 150;
            int Y1temp = 50;
            int X2temp = 290;
            int X2tempInit = X2temp;
            int Y2temp = 47;
            int Y2tempStore = Y2temp;
            //loops through all previous guesses in userGuessHistory
            for (int i = 0; i < userGuessHistory.size(); i++)
            {
                //loops through each of the four colors in the sequence, or the analysis of that sequence
                for (int index = 0; index < userGuessHistory.get(i).length; index++)
                {
                    //checks whether it is looking at a color sequence or an analysis.
                    //all color sequences are at even indexes in userGuessHistory
                    if (i % 2 == 0)
                    {
                        //gets the color, switches it like before
                        int color = userGuessHistory.get(i)[index];
                        switch (color)
                        {
                            case 0:
                            {
                                g.setColor(Color.GRAY);
                                break;
                            }
                            case 1:
                            {
                                g.setColor(Color.ORANGE);
                                break;
                            }
                            case 2:
                            {
                                g.setColor(Color.RED);
                                break;
                            }
                            case 3:
                            {
                                g.setColor(Color.GREEN);
                                break;
                            }
                            case 4:
                            {
                                g.setColor(Color.BLUE);
                                break;
                            }
                            case 5:
                            {
                                g.setColor(Color.YELLOW);
                                break;
                            }
                            case 6:
                            {
                                g.setColor(Color.MAGENTA);
                                break;
                            }
                        }
                        //draws rectangle, moves it like before.
                        g.fillRect(X1temp, Y1temp, 30, 30);
                        X1temp += 35;
                    }
                    //if it is looking at an analysis, then it changes the switch statement accordingly
                    else
                    {
                        //prints analysis next the the drawn sequence, just like it did in the paintComponent method
                        int feedback = userGuessHistory.get(i)[index];
                        switch (feedback)
                        {
                            case 7:
                            {
                                g.setColor(Color.BLACK);
                                break;
                            }
                            case 8:
                            {
                                g.setColor(Color.WHITE);
                                break;
                            }
                            case 9:
                            {
                                g.setColor(Color.DARK_GRAY);
                                break;
                            }
                        }
                        //moves the drawing location of the circle based on current index
                        if (index == 0)
                        {
                            g.fillOval(X2temp, Y2temp, 15, 15);
                            //move to the right
                            X2temp += 20;
                        }
                        else if (index == 1)
                        {
                            g.fillOval(X2temp, Y2temp, 15, 15);
                            //go back to the initial x, and move down one
                            X2temp = X2tempInit;
                            Y2temp += 20;
                        }
                        else if (index == 2)
                        {
                            g.fillOval(X2temp, Y2temp, 15, 15);
                            //move right again
                            X2temp += 20;
                        }
                        else
                        {
                            g.fillOval(X2temp, Y2temp, 15, 15);
                        }
                    }
                }
                //after it loops through printing out everything in the sequence/analysis,
                //it then sets up where the next sequence/analysis will be drawn.
                //If this sequence/analysis's index is divisible by 6 (meaning its at the end of a row of three
                //sequences and their analyses), it resets the x's back to their original value and
                //shifts all the Y's down
                if ((i + 1) % 6 == 0)
                {
                    X1temp = 150;
                    Y1temp += 100;
                    X2temp = 290;
                    Y2temp += 80;
                    Y2tempStore = Y2temp;
                }
                //otherwise, it shifts the X's over enough so that they don't overlap
                else
                {
                    X1temp += 50;
                    if (i == 0 || i == 6 || i == 12 || i == 18)
                    {
                        X2temp = 290;
                    }
                    else
                    {
                        X2temp += 110;
                        Y2temp = Y2tempStore;
                    }
                    X2tempInit = X2temp;
                }
            }
        }
    }

    /**
     * Code for the level select buttons. All level select buttons are identical except for the number
     * of turns they set turnCounter to. Therefor, I will just comment up one of them.
     *
     * Methods by Sam
     */
    private class EasyButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public EasyButton()
        {
            super("Easy Level: Allows 12 turns for you to guess the sequence!");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            //sets the number of turns
            turnCounter = 12;
            //changes screen from level select to game screen
            isGameRunning = true;
            //resets int flag back to neither win nor loss
            isGameWon = 1;
            //resets all slot buttons back to the default
            fSlot1.setBackground(Color.GRAY);
            fSlot2.setBackground(Color.GRAY);
            fSlot3.setBackground(Color.GRAY);
            fSlot4.setBackground(Color.GRAY);

            //clears userGuess
            userGuess = new MastermindColorSequence();

            //clears guessAnalysis
            guessAnalysis = new int[4];
            //repopulates guessAnalysis with nothing (all 9's)
            for (int i = 0; i < guessAnalysis.length; i++)
            {
                guessAnalysis[i] = 9;
            }
            //clears userGuessHistory
            for(int i = userGuessHistory.size() - 1; i >= 0; i--)
            {
                userGuessHistory.remove(i);
            }

            //generates a new random color sequence
            computerSequence.generateRandomColorSequence();

            repaint();
        }
    }

    private class MediumButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public MediumButton()
        {
            super("Medium Level: Allows 10 turns to guess the sequence.");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            turnCounter = 10;
            isGameRunning = true;
            isGameWon = 1;

            fSlot1.setBackground(Color.GRAY);
            fSlot2.setBackground(Color.GRAY);
            fSlot3.setBackground(Color.GRAY);
            fSlot4.setBackground(Color.GRAY);

            userGuess = new MastermindColorSequence();

            guessAnalysis = new int[4];
            for (int i = 0; i < guessAnalysis.length; i++)
            {
                guessAnalysis[i] = 9;
            }

            for(int i = userGuessHistory.size() - 1; i >= 0; i--)
            {
                userGuessHistory.remove(i);
            }

            computerSequence.generateRandomColorSequence();

            repaint();
        }
    }

    private class HardButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public HardButton()
        {
            super("Hard Level: Allows only 8 turns for you to guess the sequence!");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            turnCounter = 8;
            isGameRunning = true;
            isGameWon = 1;
            fSlot1.setBackground(Color.GRAY);
            fSlot2.setBackground(Color.GRAY);
            fSlot3.setBackground(Color.GRAY);
            fSlot4.setBackground(Color.GRAY);

            userGuess = new MastermindColorSequence();

            guessAnalysis = new int[4];
            for (int i = 0; i < guessAnalysis.length; i++)
            {
                guessAnalysis[i] = 9;
            }

            for(int i = userGuessHistory.size() - 1; i >= 0; i--)
            {
                userGuessHistory.remove(i);
            }

            computerSequence.generateRandomColorSequence();

            repaint();
        }
    }

    /**
     * This is a standard color button. All of them are identical except for the color
     * they set in colorSet. Same deal goes here as for the level select buttons.
     *
     * Methods by Sam
     */
    private class OrangeButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public OrangeButton()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            //sets the color to whatever int value goes with this button
            colorSet = 1;

            repaint();
        }
    }

    private class RedButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public RedButton()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            colorSet = 2;

            repaint();
        }
    }

    private class GreenButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public GreenButton()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            colorSet = 3;

            repaint();
        }
    }

    private class BlueButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public BlueButton()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            colorSet = 4;

            repaint();
        }
    }

    private class YellowButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public YellowButton()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            colorSet = 5;

            repaint();
        }
    }

    private class MagentaButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public MagentaButton()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            colorSet = 6;

            repaint();
        }
    }

    /**
     * This is the checkGuess button code. Very important stuff. Analyses all the data
     * that comes from the comparison of the user's guess to the computer sequence, and
     * then stores eveything in its proper place.
     *
     * Method by Sam
     */
    private class CheckGuessButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public CheckGuessButton()
        {
            super("Check Guess!");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            //creates a temporary copy of userGuess so that userGuess is not changed at all
            //by the code in the ColorSequence checkGuess method.
            List<Integer> temp = new ArrayList<>();
            for(int i = 0; i < computerSequence.getColorSequence().size(); i++)
            {
                temp.add(computerSequence.getColorSequence().get(i));
            }
            //sets guessAnalysis to the returned array from the checkGuess method
            guessAnalysis = userGuess.checkGuess(temp);
            //decrements turn number
            turnCounter--;
            //null array indicates a user win
            if (guessAnalysis == null)
            {
                isGameWon = 2;
            }
            //then checks if the user has now lost
            else if (turnCounter < 1)
            {
                isGameWon = 3;
            }
            //otherwise, its a neither win nor loss
            else
            {
                isGameWon = 1;
            }
            //copies the color sequence the user guessed into a temp array, which is then stored in userGuessHistory
            int[] tempArr = new int[userGuess.getColorSequence().size()];
            for (int index = 0; index < userGuess.getColorSequence().size(); index++)
            {
                tempArr[index] = userGuess.getColorSequence().get(index);
            }
            userGuessHistory.add(tempArr);

            //then creates a temp array copy of the guessAnalysis and adds that to userGuessHistory
            int[] tempAnalysis = new int[4];
            if (guessAnalysis != null)
            {
                for(int i = 0; i < guessAnalysis.length; i++)
                {
                    tempAnalysis[i] = guessAnalysis[i];
                }
            }
            userGuessHistory.add(tempAnalysis);

            repaint();
        }
    }

    /**
     * The back button allows the user to get back to the level select button.
     * It only appears when a user has win or loss
     */
    private class BackButton extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public BackButton()
        {
            super("Back");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            //flips screen back to level select
            isGameRunning = false;

            repaint();
        }
    }

    /**
     * The slot button, that fills with the previously selected color, and sets that location in the sequence
     * to that color. Again, all slot buttons are the same except for which button gets filled, so only commenting up one
     */
    private class Slot1Button extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public Slot1Button()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            //sets this location in the sequence to the color stored in colorSet
            userGuess.setColors(0, colorSet);
            //switch statement changes the background color of the button to the color it just set
            switch (userGuess.getColorSequence().get(0))
            {
                case 0:
                {
                    this.setBackground(Color.GRAY);
                    break;
                }
                case 1:
                {
                    this.setBackground(Color.ORANGE);
                    break;
                }
                case 2:
                {
                    this.setBackground(Color.RED);
                    break;
                }
                case 3:
                {
                    this.setBackground(Color.GREEN);
                    break;
                }
                case 4:
                {
                    this.setBackground(Color.BLUE);
                    break;
                }
                case 5:
                {
                    this.setBackground(Color.YELLOW);
                    break;
                }
                case 6:
                {
                    this.setBackground(Color.MAGENTA);
                    break;
                }
            }

            repaint();
        }
    }

    private class Slot2Button extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public Slot2Button()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            userGuess.setColors(1, colorSet);
            switch (userGuess.getColorSequence().get(1))
            {
                case 0:
                {
                    this.setBackground(Color.GRAY);
                    break;
                }
                case 1:
                {
                    this.setBackground(Color.ORANGE);
                    break;
                }
                case 2:
                {
                    this.setBackground(Color.RED);
                    break;
                }
                case 3:
                {
                    this.setBackground(Color.GREEN);
                    break;
                }
                case 4:
                {
                    this.setBackground(Color.BLUE);
                    break;
                }
                case 5:
                {
                    this.setBackground(Color.YELLOW);
                    break;
                }
                case 6:
                {
                    this.setBackground(Color.MAGENTA);
                    break;
                }
            }

            repaint();
        }
    }

    private class Slot3Button extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public Slot3Button()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            userGuess.setColors(2, colorSet);
            switch (userGuess.getColorSequence().get(2))
            {
                case 0:
                {
                    this.setBackground(Color.GRAY);
                    break;
                }
                case 1:
                {
                    this.setBackground(Color.ORANGE);
                    break;
                }
                case 2:
                {
                    this.setBackground(Color.RED);
                    break;
                }
                case 3:
                {
                    this.setBackground(Color.GREEN);
                    break;
                }
                case 4:
                {
                    this.setBackground(Color.BLUE);
                    break;
                }
                case 5:
                {
                    this.setBackground(Color.YELLOW);
                    break;
                }
                case 6:
                {
                    this.setBackground(Color.MAGENTA);
                    break;
                }
            }

            repaint();
        }
    }

    private class Slot4Button extends JButton implements ActionListener
    {
        //standard button code, gotten from game of life and such
        public Slot4Button()
        {
            super("");
            addActionListener(this);
        }

        /**
         * React to the button press.
         *
         * @param e the action
         */
        public void actionPerformed(ActionEvent e)
        {
            userGuess.setColors(3, colorSet);
            switch (userGuess.getColorSequence().get(3))
            {
                case 0:
                {
                    this.setBackground(Color.GRAY);
                    break;
                }
                case 1:
                {
                    this.setBackground(Color.ORANGE);
                    break;
                }
                case 2:
                {
                    this.setBackground(Color.RED);
                    break;
                }
                case 3:
                {
                    this.setBackground(Color.GREEN);
                    break;
                }
                case 4:
                {
                    this.setBackground(Color.BLUE);
                    break;
                }
                case 5:
                {
                    this.setBackground(Color.YELLOW);
                    break;
                }
                case 6:
                {
                    this.setBackground(Color.MAGENTA);
                    break;
                }
            }

            repaint();
        }
    }
}
